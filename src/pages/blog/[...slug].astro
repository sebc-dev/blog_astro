---
import MainLayout from "../../layouts/MainLayout.astro";
import { getCollection } from "astro:content";
import { getLangFromUrl, useTranslations } from "../../i18n/utils";
import { siteUtils } from "../../config/site";

export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");
  
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Système d'internationalisation
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Validation et extraction sécurisée des métadonnées
const entryData = entry.data || {};
const title = entryData.title || "Article sans titre";
const description = entryData.description || "";
const ogImage = entryData.heroImage;

// Gestion sécurisée de l'auteur avec fallback internationalisé
const rawAuthor = entryData.author;
const hasValidAuthor = rawAuthor && typeof rawAuthor === 'string' && rawAuthor.trim() !== '';
const author = hasValidAuthor ? rawAuthor.trim() : t("blog.unknownAuthor");

// Validation sécurisée de pubDate
const pubDate = entryData.pubDate;
const isValidDate = pubDate && pubDate instanceof Date && !isNaN(pubDate.getTime());
const publishedTime = isValidDate ? pubDate.toISOString() : new Date().toISOString();

// Tags pour les métadonnées (adaptés aux propriétés disponibles)
const tags: string[] = [];

// Génération du schéma JSON-LD avec la configuration centralisée
// Seulement si nous avons un auteur valide pour éviter les données structurées incorrectes
const blogPostSchema = siteUtils.generateBlogPostSchema({
  title,
  description,
  image: ogImage,
  datePublished: publishedTime,
  author: hasValidAuthor ? author : t("blog.unknownAuthor"),
});
---

<MainLayout 
  title={title}
  description={description}
  ogImage={ogImage}
>
  <!-- Métadonnées spécifiques aux articles -->
  <meta slot="head" property="og:type" content="article" />
  <meta slot="head" property="article:published_time" content={publishedTime} />
  {hasValidAuthor && (
    <meta slot="head" property="article:author" content={author} />
  )}
  {tags.map(tag => (
    <meta slot="head" property="article:tag" content={tag} />
  ))}
  
  <!-- Schema.org pour les articles -->
  <script slot="head" type="application/ld+json" set:html={JSON.stringify(blogPostSchema)} />

  <article class="prose prose-lg mx-auto max-w-4xl px-4 py-8">
    <!-- En-tête de l'article -->
    <header class="mb-8">
      <h1 class="text-4xl font-bold mb-4">{title}</h1>
      <p class="text-xl text-muted-accessible mb-4">{description}</p>
      
      <div class="flex items-center gap-4 text-sm text-secondary-accessible">
        {hasValidAuthor && (
          <>
            <span>Par {author}</span>
            <span>•</span>
          </>
        )}
        <time datetime={publishedTime}>
          {isValidDate ? pubDate.toLocaleDateString(
            lang === "fr" ? "fr-FR" : "en-US",
            {
              year: "numeric",
              month: "long",
              day: "numeric"
            }
          ) : "Date non disponible"}
        </time>
      </div>
    </header>

    <!-- Image hero -->
    {ogImage && (
      <img 
        src={ogImage} 
        alt={title}
        class="w-full h-64 object-cover rounded-lg mb-8"
      />
    )}

    <!-- Contenu de l'article -->
    <Content />
  </article>
</MainLayout> 