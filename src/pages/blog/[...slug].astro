---
import MainLayout from "../../layouts/MainLayout.astro";
import TableOfContents from "../../components/TableOfContents.astro";
import { getCollection } from "astro:content";
import { getLangFromUrl, useTranslations } from "../../i18n/utils";
import { siteConfig, siteUtils } from "../../config/site";
import { estimateReadingTime } from "../../scripts/article-utils";
import { buildTocHierarchy, shouldShowToc } from "../../scripts/toc-utils";
import "../../styles/blog-article.css";

export async function getStaticPaths() {
  const blogEntries = await getCollection("blog");

  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const { Content, headings } = await entry.render();

// Système d'internationalisation
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Validation et extraction sécurisée des métadonnées
const entryData = entry.data || {};
const title = entryData.title || "Article sans titre";
const description = entryData.description || "";
const ogImage = entryData.heroImage;

// Validation sécurisée de pubDate
const pubDate = entryData.pubDate;
const isValidDate =
  pubDate && pubDate instanceof Date && !isNaN(pubDate.getTime());
const publishedTime = isValidDate
  ? pubDate.toISOString()
  : new Date().toISOString();

// Tags pour les métadonnées (adaptés aux propriétés disponibles)
const tags: string[] = [];

// Calcul du temps de lecture
const readingTime = estimateReadingTime(entry, lang);

// Génération de la table des matières au build-time
const tableOfContents = buildTocHierarchy(headings);
const showToc = shouldShowToc(headings);

// Génération du schéma JSON-LD avec la configuration centralisée
const blogPostSchema = siteUtils.generateBlogPostSchema({
  title,
  description,
  image: ogImage,
  datePublished: publishedTime,
  author: siteConfig.author, // Utiliser l'auteur du site depuis la config
});
---

<MainLayout title={title} description={description} ogImage={ogImage}>
  <!-- Métadonnées spécifiques aux articles -->
  <meta slot="head" property="og:type" content="article" />
  <meta slot="head" property="article:published_time" content={publishedTime} />
  <meta slot="head" property="article:author" content={siteConfig.author} />
  {tags.map((tag) => <meta slot="head" property="article:tag" content={tag} />)}

  <!-- Schema.org pour les articles -->
  <script
    slot="head"
    type="application/ld+json"
    set:html={JSON.stringify(blogPostSchema)}
  />
  <!-- Layout en grille pour article + future table des matières -->
  <div class="article-layout mx-auto max-w-7xl px-4 pt-4 pb-16">
    <!-- Article principal (colonne de gauche) -->
    <article
      class="prose prose-lg bg-base-300 border-base-400 flex min-h-[80vh] max-w-none flex-col overflow-hidden rounded-lg border shadow-lg backdrop-blur-sm"
    >
      <!-- Image hero en premier qui prend tout le haut -->
      {
        ogImage && (
          <figure class="article-image not-prose m-0 min-h-0 flex-1 overflow-hidden p-0">
            <img src={ogImage} alt={title} class="h-full w-full object-cover" />
          </figure>
        )
      }

      <!-- Contenu qui ne rétrécit pas -->
      <div class="flex-shrink-0 px-6 py-8">
        <!-- En-tête de l'article : Titre + Métadonnées -->
        <header class="article-header not-prose mb-4">
          <!-- Titre principal -->
          <h1 class="text-base-content mb-6 text-4xl leading-tight font-bold">
            {title}
          </h1>

          <!-- Métadonnées : date et temps de lecture -->
          <div
            class="metadata-bar text-muted-accessible mb-2 flex items-center justify-between text-sm"
          >
            <div class="flex items-center gap-2">
              <svg
                class="h-4 w-4 opacity-60"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fill-rule="evenodd"
                  d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z"
                  clip-rule="evenodd"></path>
              </svg>
              <time datetime={publishedTime}>
                {
                  isValidDate
                    ? pubDate.toLocaleDateString(
                        lang === "fr" ? "fr-FR" : "en-US",
                        {
                          year: "numeric",
                          month: "long",
                          day: "numeric",
                        },
                      )
                    : "Date non disponible"
                }
              </time>
            </div>

            <div class="flex items-center gap-2">
              <svg
                class="h-4 w-4 opacity-60"
                fill="currentColor"
                viewBox="0 0 20 20"
              >
                <path
                  fill-rule="evenodd"
                  d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z"
                  clip-rule="evenodd"></path>
              </svg>
              <span>{readingTime} min de lecture</span>
            </div>
          </div>
        </header>

        <!-- Contenu de l'article (sans le titre H1 du Markdown) -->
        <div class="article-content">
          <Content />
        </div>
      </div>
    </article>

    <!-- Table des matières générée dynamiquement -->
    {
      showToc && tableOfContents.length > 0 && (
        <TableOfContents headings={tableOfContents} />
      )
    }
  </div>
</MainLayout>
