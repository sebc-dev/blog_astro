---

import { getLangFromUrl, useTranslations, useTranslatedPath, getPathWithoutLang } from '../i18n/utils';

interface NavLink {
  href: string;
  key: string;
}

interface Props {
  siteName?: string;
  navLinks?: NavLink[];
}


const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

const {
  siteName = "sebc.dev",
  navLinks = [
    { href: "/", key: "nav.home" },
    { href: "/about", key: "nav.about" },
    { href: "/services", key: "nav.services" },
    { href: "/contact", key: "nav.contact" },
  ],
} = Astro.props;


const translatedNavLinks = navLinks.map(link => ({
  href: translatePath(link.href),
  label: t(link.key as any),
  isActive: Astro.url.pathname === translatePath(link.href)
}));


const currentPath = getPathWithoutLang(Astro.url);
const languageUrls = {
  en: {
    url: currentPath,
    isActive: lang === 'en',
    label: 'English',
    flag: 'ðŸ‡ºðŸ‡¸'
  },
  fr: {
    url: `/fr${currentPath}`,
    isActive: lang === 'fr', 
    label: 'FranÃ§ais',
    flag: 'ðŸ‡«ðŸ‡·'
  }
};


const criticalCSS = `
  .header-critical {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 50;
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(8px);
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
  }
  @media (prefers-color-scheme: dark) {
    .header-critical {
      background: rgba(0, 0, 0, 0.95);
      border-bottom-color: rgba(255, 255, 255, 0.1);
    }
  }
`;

// PrÃ©paration des attributs SEO
const hreflangLinks = Object.entries(languageUrls).map(([langCode, data]) => ({
  hreflang: langCode,
  href: data.url
}));
---

<!-- CSS Critique Inline (zÃ©ro temps de chargement) -->
<style is:inline set:html={criticalCSS}></style>

<!-- Header Desktop -->
<header
  id="desktop-header"
  class="header-critical hidden lg:block"
  role="banner"
>
  <div class="navbar mx-auto max-w-7xl px-4">
    <!-- Logo avec prÃ©load de la page d'accueil -->
    <div class="navbar-start">
      <a
        href={translatePath("/")}
        class="from-primary to-secondary bg-gradient-to-r bg-clip-text font-mono text-xl font-bold text-transparent"
        rel="prefetch"
      >
        {siteName}
      </a>
    </div>

    <!-- Navigation Statique (Zero-JS) -->
    <nav class="navbar-center" aria-label={t('nav.home')}>
      <ul class="menu menu-horizontal px-1" role="menubar">
        {translatedNavLinks.map((link) => (
          <li role="none">
            <a
              href={link.href}
              class={`nav-link transition-colors duration-200 ${link.isActive ? 'bg-primary text-primary-content' : 'hover:bg-primary hover:text-primary-content'}`}
              role="menuitem"
              aria-current={link.isActive ? 'page' : undefined}
              rel="prefetch"
            >
              {link.label}
            </a>
          </li>
        ))}
      </ul>
    </nav>

    <!-- ContrÃ´les (Langue + ThÃ¨me) -->
    <div class="navbar-end flex items-center gap-2">
      <!-- SÃ©lecteur de langue statique -->
      <div class="dropdown dropdown-end">
        <button
          class="btn btn-ghost btn-sm"
          aria-haspopup="true"
          aria-expanded="false"
          aria-label={t('languageSwitcher.label')}
          data-dropdown="lang-desktop"
        >
          <span>{languageUrls[lang].flag} {lang.toUpperCase()}</span>
          <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M6 9l6 6 6-6"></path>
          </svg>
        </button>
        <ul class="dropdown-content menu bg-base-100 rounded-box border border-base-300 z-[1] w-32 p-2 shadow-lg">
          {Object.entries(languageUrls).map(([langCode, data]) => (
            <li>
              <a
                href={data.url}
                class={`text-sm ${data.isActive ? 'bg-primary text-primary-content font-semibold' : ''}`}
                hreflang={langCode}
                rel="prefetch"
              >
                {data.flag} {data.label}
              </a>
            </li>
          ))}
        </ul>
      </div>

      <!-- Theme Toggle DaisyUI natif -->
      <label class="swap swap-rotate" aria-label={t('theme.toggle')}>
        <input type="checkbox" class="theme-controller" value="dark" />
        <svg class="swap-off fill-current w-6 h-6" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
          <path d="M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z"/>
        </svg>
        <svg class="swap-on fill-current w-6 h-6" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
          <path d="M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z"/>
        </svg>
      </label>
    </div>
  </div>
</header>

<!-- Header Mobile -->
<header
  id="mobile-header"
  class="header-critical lg:hidden"
  role="banner"
>
  <div class="flex items-center justify-between px-4 py-3">
    <!-- Logo Mobile -->
    <a
      href={translatePath("/")}
      class="from-primary to-secondary bg-gradient-to-r bg-clip-text font-mono text-xl font-bold text-transparent"
      rel="prefetch"
    >
      {siteName}
    </a>

    <!-- Bouton Menu Mobile -->
    <button
      id="mobile-menu-toggle"
      class="btn btn-square btn-ghost"
      aria-label="Menu"
      aria-expanded="false"
      aria-controls="mobile-menu"
      data-menu-toggle
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
      </svg>
    </button>
  </div>
</header>

<!-- Menu Mobile (OptimisÃ© pour le statique) -->
<div
  id="mobile-menu"
  class="fixed inset-0 z-40 lg:hidden"
  style="transform: translateX(100%); transition: transform 0.3s ease;"
  aria-hidden="true"
>
  <div class="fixed inset-0 bg-black/50" data-menu-overlay></div>
  <div class="fixed right-0 top-0 h-full w-full bg-base-100 shadow-xl max-w-sm">
    <div class="flex flex-col h-full">
      <!-- Header du menu mobile -->
      <div class="flex items-center justify-between p-4 border-b">
        <span class="font-semibold">{t('nav.home')}</span>
        <button
          class="btn btn-ghost btn-sm"
          aria-label={t('nav.home')}
          data-menu-close
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>

      <!-- Navigation Mobile Statique -->
      <nav class="flex-1 px-4 py-6" aria-label={t('nav.home')}>
        <ul class="space-y-2">
          {translatedNavLinks.map((link) => (
            <li>
              <a
                href={link.href}
                class={`block px-4 py-3 rounded-lg transition-colors ${link.isActive ? 'bg-primary text-primary-content' : 'hover:bg-base-200'}`}
                rel="prefetch"
                data-menu-link
              >
                {link.label}
              </a>
            </li>
          ))}
        </ul>
      </nav>

      <!-- ContrÃ´les Mobile -->
      <div class="p-4 border-t space-y-4">
        <!-- Changement de langue mobile -->
        <div class="flex items-center justify-between">
          <span class="text-sm font-medium">{t('languageSwitcher.label')}</span>
          <div class="flex gap-2">
            {Object.entries(languageUrls).map(([langCode, data]) => (
              <a
                href={data.url}
                class={`btn btn-sm ${data.isActive ? 'btn-primary' : 'btn-outline'}`}
                hreflang={langCode}
                rel="prefetch"
              >
                {data.flag}
              </a>
            ))}
          </div>
        </div>

        <!-- Theme Toggle Mobile -->
        <div class="flex items-center justify-between">
          <span class="text-sm font-medium">{t('theme.toggle')}</span>
          <label class="swap swap-rotate">
            <input type="checkbox" class="theme-controller" value="dark" />
            <svg class="swap-off w-6 h-6" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
              <path d="M5.64,17l-.71.71a1,1,0,0,0,0,1.41,1,1,0,0,0,1.41,0l.71-.71A1,1,0,0,0,5.64,17ZM5,12a1,1,0,0,0-1-1H3a1,1,0,0,0,0,2H4A1,1,0,0,0,5,12Zm7-7a1,1,0,0,0,1-1V3a1,1,0,0,0-2,0V4A1,1,0,0,0,12,5ZM5.64,7.05a1,1,0,0,0,.7.29,1,1,0,0,0,.71-.29,1,1,0,0,0,0-1.41l-.71-.71A1,1,0,0,0,4.93,6.34Zm12,.29a1,1,0,0,0,.7-.29l.71-.71a1,1,0,1,0-1.41-1.41L17,5.64a1,1,0,0,0,0,1.41A1,1,0,0,0,17.66,7.34ZM21,11H20a1,1,0,0,0,0,2h1a1,1,0,0,0,0-2Zm-9,8a1,1,0,0,0-1,1v1a1,1,0,0,0,2,0V20A1,1,0,0,0,12,19ZM18.36,17A1,1,0,0,0,17,18.36l.71.71a1,1,0,0,0,1.41,0,1,1,0,0,0,0-1.41ZM12,6.5A5.5,5.5,0,1,0,17.5,12,5.51,5.51,0,0,0,12,6.5Zm0,9A3.5,3.5,0,1,1,15.5,12,3.5,3.5,0,0,1,12,15.5Z"/>
            </svg>
            <svg class="swap-on w-6 h-6" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
              <path d="M21.64,13a1,1,0,0,0-1.05-.14,8.05,8.05,0,0,1-3.37.73A8.15,8.15,0,0,1,9.08,5.49a8.59,8.59,0,0,1,.25-2A1,1,0,0,0,8,2.36,10.14,10.14,0,1,0,22,14.05,1,1,0,0,0,21.64,13Zm-9.5,6.69A8.14,8.14,0,0,1,7.08,5.22v.27A10.15,10.15,0,0,0,17.22,15.63a9.79,9.79,0,0,0,2.1-.22A8.11,8.11,0,0,1,12.14,19.73Z"/>
            </svg>
          </label>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  (() => {
    'use strict';
    
    // Configuration
    const ANIMATION_DURATION = 300;
    
    // Cache des Ã©lÃ©ments DOM
    const elements = {
      mobileMenu: document.getElementById('mobile-menu') as HTMLElement,
      mobileMenuToggle: document.getElementById('mobile-menu-toggle') as HTMLElement,
      overlay: document.querySelector('[data-menu-overlay]') as HTMLElement,
      closeBtn: document.querySelector('[data-menu-close]') as HTMLElement,
      menuLinks: document.querySelectorAll('[data-menu-link]') as NodeListOf<HTMLElement>,
      dropdownButtons: document.querySelectorAll('[data-dropdown]') as NodeListOf<HTMLElement>
    };
    
    // Ã‰tat du menu
    let isMenuOpen = false;
    
    // Gestion du menu mobile
    function toggleMenu() {
      isMenuOpen = !isMenuOpen;
      
      if (isMenuOpen) {
        openMenu();
      } else {
        closeMenu();
      }
    }
    
    function openMenu() {
      const { mobileMenu, mobileMenuToggle } = elements;
      
      mobileMenu.style.transform = 'translateX(0)';
      mobileMenu.setAttribute('aria-hidden', 'false');
      mobileMenuToggle.setAttribute('aria-expanded', 'true');
      document.body.style.overflow = 'hidden';
      
      // Focus sur le premier lien
      setTimeout(() => {
        elements.menuLinks[0]?.focus();
      }, ANIMATION_DURATION);
    }
    
    function closeMenu() {
      const { mobileMenu, mobileMenuToggle } = elements;
      
      mobileMenu.style.transform = 'translateX(100%)';
      mobileMenu.setAttribute('aria-hidden', 'true');
      mobileMenuToggle.setAttribute('aria-expanded', 'false');
      document.body.style.overflow = '';
      
      // Focus de retour
      mobileMenuToggle.focus();
      isMenuOpen = false;
    }
    
    // Event Listeners
    elements.mobileMenuToggle?.addEventListener('click', toggleMenu);
    elements.overlay?.addEventListener('click', closeMenu);
    elements.closeBtn?.addEventListener('click', closeMenu);
    
    // Fermer le menu avec Escape
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isMenuOpen) {
        closeMenu();
      }
    });
    
    // Fermer le menu lors du clic sur un lien
    elements.menuLinks.forEach(link => {
      link.addEventListener('click', closeMenu);
    });
    
    // Gestion des dropdowns
    elements.dropdownButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        
        // Fermer tous les dropdowns
        elements.dropdownButtons.forEach(btn => {
          btn.setAttribute('aria-expanded', 'false');
        });
        
        // Toggle celui-ci
        if (!isExpanded) {
          button.setAttribute('aria-expanded', 'true');
        }
      });
    });
    
    // Fermer les dropdowns en cliquant ailleurs
    document.addEventListener('click', (e: MouseEvent) => {
      if (!e.target || !(e.target instanceof HTMLElement) || !e.target.closest('.dropdown')) {
        elements.dropdownButtons.forEach(btn => {
          btn.setAttribute('aria-expanded', 'false');
        });
      }
    });
    
    const themeToggles = document.querySelectorAll('.theme-controller');
    themeToggles.forEach((toggle, index) => {
      toggle.addEventListener('change', () => {
        themeToggles.forEach((otherToggle, otherIndex) => {
          if (index !== otherIndex) {
            (otherToggle as HTMLInputElement).checked = (toggle as HTMLInputElement).checked;
          }
        });
      });
    });
  })();
</script>

<!-- Preload des pages importantes (Site statique) -->
{translatedNavLinks.slice(0, 3).map(link => (
  <link rel="prefetch" href={link.href} />
))}

<!-- Links alternatifs pour SEO -->
{hreflangLinks.map(link => (
  <link rel="alternate" hreflang={link.hreflang} href={link.href} />
))}

<style>
  /* Styles non-critiques (chargÃ©s de faÃ§on asynchrone) */
  .dropdown-content {
    animation: dropdown-appear 0.2s ease-out;
  }
  
  @keyframes dropdown-appear {
    from {
      opacity: 0;
      transform: translateY(-8px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Optimisation pour les transitions */
  [data-menu-toggle],
  [data-menu-close] {
    transition: all 0.15s ease;
  }
  
  /* Focus visible pour l'accessibilitÃ© */
  button:focus-visible,
  a:focus-visible {
    outline: 2px solid hsl(var(--p));
    outline-offset: 2px;
    border-radius: 4px;
  }
  
  /* Optimisation des animations */
  @media (prefers-reduced-motion: reduce) {
    #mobile-menu {
      transition: none !important;
    }
    .dropdown-content {
      animation: none !important;
    }
  }
</style>