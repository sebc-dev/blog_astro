---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import ArticleHero from "@/components/ui/ArticleHero.astro";
import ArticleCard from "@/components/ui/ArticleCard.astro";
import {
  getLangFromUrl,
  useTranslations,
  useTranslatedPath,
} from "@/i18n/utils";
import {
  estimateReadingTime as utilEstimateReadingTime,
  getPostCategory as utilGetPostCategory,
  getPostTag as utilGetPostTag,
} from "@/lib/article/article-utils";

interface Props {
  maxArticles?: number;
  showHero?: boolean;
}

const { maxArticles = 7, showHero = true } = Astro.props;

// Détecter la langue depuis l'URL
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);

// Récupérer tous les articles de blog dans la langue courante
const allPosts: CollectionEntry<"blog">[] = await getCollection(
  "blog",
  ({ data }) => {
    return data.lang === lang;
  },
);

// Trier par date de publication (plus récent en premier)
const sortedPosts = [...allPosts].sort((a, b) => {
  return (
    new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
  );
});

// Limiter le nombre d'articles
const limitedPosts = sortedPosts.slice(0, maxArticles);

// Séparer l'article héro des autres pour desktop
const heroPosts = showHero && limitedPosts.length > 0 ? [limitedPosts[0]] : [];
const gridPostsDesktop =
  showHero && limitedPosts.length > 1 ? limitedPosts.slice(1) : limitedPosts;

// Pour mobile : tous les articles dans la grille (pas de hero)
const gridPostsMobile = limitedPosts;

// Utiliser les fonctions utilitaires avec les traductions de ce composant
const estimateReadingTime = (post: CollectionEntry<"blog">) =>
  utilEstimateReadingTime(post, lang);

const getPostCategory = (post: CollectionEntry<"blog">) =>
  utilGetPostCategory(post, {
    translations: {
      framework: t("category.framework"),
      language: t("category.language"),
      performance: t("category.performance"),
      styling: t("category.styling"),
      backend: t("category.backend"),
      article: t("category.article"),
    },
  });

const getPostTag = (post: CollectionEntry<"blog">) =>
  utilGetPostTag(post, {
    translations: {
      guide: t("tag.guide"),
      optimization: t("tag.optimization"),
      bestPractices: t("tag.bestPractices"),
      comparison: t("tag.comparison"),
    },
  });
---

<section
  class="latest-articles"
  aria-label={t("latestArticles.title")}
  data-cy="latest-articles-section"
>
  <div class="container mx-auto max-w-7xl px-4" data-cy="articles-container">
    <!-- Contenu principal -->
    <div class="articles-layout" data-cy="articles-layout">
      <!-- Article Héro (desktop uniquement) -->
      {
        heroPosts.length > 0 && (
          <div class="hero-section hidden lg:block" data-cy="hero-section">
            {heroPosts.map((post) => (
              <ArticleHero
                title={post.data.title}
                description={post.data.description}
                heroImage={post.data.heroImage}
                pubDate={post.data.pubDate}
                category={getPostCategory(post)}
                tag={getPostTag(post)}
                slug={post.slug}
                readingTime={estimateReadingTime(post)}
              />
            ))}
          </div>
        )
      }

      <!-- Grille d'articles Desktop (sans le premier article qui est en hero) -->
      {
        gridPostsDesktop.length > 0 && (
          <div
            class="grid-section hidden pt-16 lg:block"
            data-cy="grid-section-desktop"
          >
            <div
              class="articles-grid grid gap-6 md:grid-cols-2 lg:grid-cols-3"
              data-cy="articles-grid-desktop"
            >
              {gridPostsDesktop.map((post) => (
                <ArticleCard
                  title={post.data.title}
                  description={post.data.description}
                  heroImage={post.data.heroImage}
                  pubDate={post.data.pubDate}
                  category={getPostCategory(post)}
                  tag={getPostTag(post)}
                  slug={post.slug}
                  readingTime={estimateReadingTime(post)}
                />
              ))}
            </div>
          </div>
        )
      }

      <!-- Grille d'articles Mobile (tous les articles, y compris le premier) -->
      {
        gridPostsMobile.length > 0 && (
          <div
            class="grid-section pt-4 lg:hidden"
            data-cy="grid-section-mobile"
          >
            <div
              class="articles-grid grid grid-cols-1 gap-6 sm:grid-cols-2"
              data-cy="articles-grid-mobile"
            >
              {gridPostsMobile.map((post) => (
                <ArticleCard
                  title={post.data.title}
                  description={post.data.description}
                  heroImage={post.data.heroImage}
                  pubDate={post.data.pubDate}
                  category={getPostCategory(post)}
                  tag={getPostTag(post)}
                  slug={post.slug}
                  readingTime={estimateReadingTime(post)}
                />
              ))}
            </div>
          </div>
        )
      }

      <!-- Message si aucun article -->
      {
        limitedPosts.length === 0 && (
          <div class="no-articles py-16 text-center" data-cy="no-articles">
            <div class="bg-base-200 mx-auto max-w-md rounded-lg p-8">
              <h3 class="mb-2 text-xl font-semibold">
                {t("latestArticles.noArticles")}
              </h3>
              <p class="text-muted-accessible">
                {t("latestArticles.noArticlesDesc")}
              </p>
            </div>
          </div>
        )
      }
    </div>

    <!-- Lien vers tous les articles (optionnel) -->
    {
      limitedPosts.length >= maxArticles && (
        <div class="mt-12 mb-10 text-center" data-cy="view-all-section">
          <a
            href={translatePath("/blog")}
            class="btn btn-primary btn-lg"
            data-cy="view-all-button"
          >
            {t("latestArticles.viewAll")}
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path d="M7 17L17 7" />
              <path d="M7 7h10v10" />
            </svg>
          </a>
        </div>
      )
    }
  </div>
</section>

<style>
  /* Optimisations pour la grille responsive */
  .articles-grid {
    /* Grille adaptative avec tailles équilibrées */
    display: grid;
    align-items: start; /* Fallback: aligner les items en haut */
  }

  /* Grille maçonnée si supportée (Firefox uniquement pour l'instant) */
  @supports (grid-template-rows: masonry) {
    .articles-grid {
      grid-template-rows: masonry;
    }
  }

  /* Fallback pour navigateurs sans support masonry (Chrome, Safari, etc.) */
  @supports not (grid-template-rows: masonry) {
    .articles-grid {
      grid-auto-rows: min-content; /* Hauteur automatique basée sur le contenu */
    }
  }

  /* Responsive breakpoints personnalisés */
  /* Mobile : grille complète sans hero */
  .grid-section.lg\:hidden .articles-grid {
    gap: 1.5rem;
  }

  @media (max-width: 640px) {
    .grid-section.lg\:hidden .articles-grid {
      grid-template-columns: 1fr; /* 1 colonne sur petit mobile */
      gap: 1rem;
    }
  }

  @media (min-width: 641px) and (max-width: 1023px) {
    .grid-section.lg\:hidden .articles-grid {
      grid-template-columns: repeat(
        2,
        1fr
      ); /* 2 colonnes sur grand mobile/tablette */
    }
  }

  /* Desktop : grille avec hero séparé */
  @media (min-width: 1024px) {
    .grid-section.hidden.lg\:block .articles-grid {
      grid-template-columns: repeat(3, 1fr); /* 3 colonnes sur desktop */
    }

    .hero-section {
      margin-bottom: 2rem;
    }
  }

  /* Amélioration de l'accessibilité et des performances */
  .latest-articles {
    /* Optimisation de la peinture */
    contain: layout paint style;
  }

  /* Animation au chargement */
  .hero-section,
  .grid-section {
    animation: fadeInUp 0.6s ease-out;
  }

  .articles-grid > * {
    animation: fadeInUp 0.6s ease-out;
    animation-fill-mode: both;
  }

  /* Décalage des animations pour effet en cascade */
  .articles-grid > *:nth-child(1) {
    animation-delay: 0.1s;
  }
  .articles-grid > *:nth-child(2) {
    animation-delay: 0.2s;
  }
  .articles-grid > *:nth-child(3) {
    animation-delay: 0.3s;
  }
  .articles-grid > *:nth-child(4) {
    animation-delay: 0.4s;
  }
  .articles-grid > *:nth-child(5) {
    animation-delay: 0.5s;
  }
  .articles-grid > *:nth-child(6) {
    animation-delay: 0.6s;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Support réduit du motion pour accessibilité */
  @media (prefers-reduced-motion: reduce) {
    .hero-section,
    .grid-section,
    .articles-grid > * {
      animation: none;
    }
  }
</style>
