---
description: Règle TypeScript complète pour projets Astro appliquant la philosophie "TypeScript-first" avec intégration privilégiée dans les composants .astro, configuration optimisée, Content Collections typées et patterns de performance. Couvre l'architecture, le typage strict, l'organisation par domaine et les bonnes pratiques de développement Astro moderne.
globs: ["*.astro", "*.ts", "*.tsx"]
alwaysApply: false
---

# TypeScript Astro : Architecture et Bonnes Pratiques Complètes

## Règles Critiques

### Architecture et Typage
- **Utiliser le typage TypeScript strict** avec `"strict": true` dans tsconfig.json
- **Organiser par feature/domaine**, pas par type technique (Component-First pattern)
- **Privilégier l'intégration TypeScript** dans le frontmatter pour la logique spécifique aux composants
- **Externaliser uniquement** quand logique réutilisée dans 3+ composants ou dépasse 100 lignes
- **Déclarer les Props** avec interfaces TypeScript explicites dans chaque composant
- **Éviter `any`** - utiliser `unknown` puis type guards, ou `satisfies` operator

### Performance et Rendu
- **Privilégier le rendu statique** - minimiser les directives client (`client:*`)
- **Utiliser `client:load`** uniquement pour l'interactivité critique immédiate
- **Préférer `client:visible`** pour les composants below-the-fold
- **Implémenter `client:idle`** pour les fonctionnalités secondaires

### Content Collections et Données
- **Créer des Content Collections typées** avec schemas Zod obligatoires
- **Utiliser `getCollection()`** avec inférence de type automatique
- **Typer les données CMS/API** dans `src/types/content.ts`
- **Implémenter des API routes typées** avec interface `APIRoute`

## Configuration TypeScript Optimisée

- **moduleResolution: "bundler"** pour Astro 3+
- **target: "ES2022"** minimum pour les features modernes  
- **exactOptionalPropertyTypes: true** pour la précision maximale
- **Path mappings configurés** : `"@/*": ["./src/*"]`

## Organisation Structurelle

```
src/
├── components/       # Composants .astro avec TS intégré
├── types/           # Types partagés avec exports explicites
├── content/         # Collections avec schemas Zod
├── lib/utils/       # Utilitaires réutilisables typés
└── pages/           # Routes avec logique intégrée
```

## Critères de Décision pour l'Externalisation

### Externaliser quand :
- **Logique réutilisée** dans 3+ composants différents
- **Fonction complexe** dépassant 100 lignes de code
- **Logique métier** indépendante de l'interface utilisateur
- **Tests unitaires** spécifiques nécessaires pour la fonction

### Garder intégré quand :
- **Logique spécifique** au composant uniquement
- **Accès `Astro.props`** requis pour le fonctionnement
- **Cohésion template/logique** critique pour la maintenance
- **Simplicité** prime sur la réutilisabilité théorique

## Patterns de Composants Astro

### Structure Standard
- **Frontmatter TypeScript** avec interfaces Props explicites
- **Destructuring typé** de `Astro.props` pour meilleure DX
- **Logique côté serveur uniquement** dans le frontmatter
- **CSS scoped** avec `<style>` - éviter les styles globaux sauf layouts

## Patterns de Code

<example>
// Content Collection avec Schema Zod
import { defineCollection, z } from 'astro:content';

const blogCollection = defineCollection({
  type: 'content',
  schema: z.object({
    title: z.string(),
    publishDate: z.date(),
    tags: z.array(z.string()).optional(),
    featured: z.boolean().default(false)
  })
});

export const collections = { blog: blogCollection };

// Usage dans composant
---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

interface Props {
  limit?: number;
}

const { limit = 10 } = Astro.props;
const posts: CollectionEntry<'blog'>[] = await getCollection('blog');
const featuredPosts = posts
  .filter(post => post.data.featured)
  .slice(0, limit);
---
</example>

<example>
// Composant Astro avec TypeScript intégré optimal
---
interface Props {
  title: string;
  description?: string;
  items: Array<{id: string; name: string}>;
  variant?: 'primary' | 'secondary';
}

const { title, description, items, variant = 'primary' } = Astro.props;

// Logique côté serveur uniquement
const processedItems = items.map(item => ({
  ...item,
  slug: item.name.toLowerCase().replace(/\s+/g, '-')
}));
---

<main class={`layout--${variant}`}>
  <h1>{title}</h1>
  {description && <p>{description}</p>}
  <ul>
    {processedItems.map(item => (
      <li key={item.id}>
        <a href={`/items/${item.slug}`}>{item.name}</a>
      </li>
    ))}
  </ul>
</main>

<style>
  /* CSS scoped au composant */
  .layout--primary { @apply bg-blue-50; }
  .layout--secondary { @apply bg-gray-50; }
</style>
</example>

<example>
// Component Island typé pour interactivité
---
interface InteractiveCounterProps {
  initialValue: number;
  step?: number;
  max?: number;
}

const props: InteractiveCounterProps = Astro.props;
---

<div id="counter-container">
  <Counter client:visible {...props} />
</div>

// src/components/Counter.tsx
interface CounterProps {
  initialValue: number;
  step?: number;
  max?: number;
}

export default function Counter({ 
  initialValue, 
  step = 1, 
  max = 100 
}: CounterProps) {
  // Logique React typée avec hooks
}
</example>

<example type="invalid">
// ❌ À éviter : Anti-patterns Astro + TypeScript
---
// Props non typées
const { title, items } = Astro.props; // Manque interface Props

// Logique client dans frontmatter  
const handleClick = () => {}; // Logique client à éviter ici
const data = await fetch('/api/data'); // OK côté serveur

// Types any
interface Props {
  data: any; // Utiliser des types spécifiques
  callback: any; // Typer les fonctions
}

// Sur-externalisation inutile
import { formatTitle } from '@lib/formatters'; // Pour .toUpperCase()
---
</example>

## Intégrations et Outils Recommandés

### Développement
- **ESLint** avec `@typescript-eslint/recommended` + règles Astro
- **Prettier** avec plugin Astro pour formatage cohérent  
- **Path mappings** configurés dans astro.config.mjs et tsconfig.json
- **Vite** pour alias et optimisations de build

### Testing et Qualité
- **Vitest** pour tests unitaires des utilitaires TypeScript
- **Husky + lint-staged** pour contrôle qualité pre-commit
- **Type coverage** avec `typescript-coverage-report`
- **Tests E2E** avec Cypress sur les pages rendues

### SEO et Métadonnées
- **Composant `<SEO>`** typé pour métadonnées cohérentes
- **ViewTransitions** avec types pour animations de page
- **Données structurées JSON-LD** avec interfaces dédiées
- **Content Security Policies** typées pour composants islands

## Anti-Patterns Critiques

- **Logique client dans frontmatter** : utiliser les composants islands appropriés
- **Types `any`** : privilégier `unknown` avec type guards ou `satisfies`
- **Sur-externalisation** : éviter les fichiers pour chaque petite fonction  
- **Imports circulaires** : organiser la hiérarchie des dépendances proprement
- **Styles globaux excessifs** : privilégier CSS scoped sauf pour les layouts